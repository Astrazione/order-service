
services:
  postgres:
    image: postgres:17
    container_name: postgres_db
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - order-network
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka_broker
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - order-network
    restart: unless-stopped

  app:
      build: .
      container_name: order_service
      environment:
        - DB_CONN_STR=postgres://postgres:postgres@postgres:5432/order_db?sslmode=disable
        - KAFKA_BROKERS=kafka:9092
        - KAFKA_TOPIC=orders
      ports:
        - "8080:8080"
      depends_on:
        - postgres
        - kafka
      networks:
        - order-network
      restart: unless-stopped
      healthcheck:
        test: ["CMD", "nc", "-z", "kafka", "9092"]
        interval: 30s
        timeout: 10s
        retries: 5

volumes:
  postgres_data:
  kafka_data:

networks:
  order-network:
    driver: bridge